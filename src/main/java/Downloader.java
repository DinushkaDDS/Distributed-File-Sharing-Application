
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.security.DigestInputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author dilan
 */
public class Downloader extends javax.swing.JPanel{

    /**
     * Creates new form Downloader
     */
    
    ServerSocket listenSocket;
    
    public Downloader(String fileDetails) {
        initComponents();
        
        String[] details = fileDetails.split("\\|");
        
        this.lblFileName.setText(details[0].trim());
        this.lblIp.setText(details[1].trim());
        this.lblPort.setText(details[2].trim());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblFileName = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblIp = new javax.swing.JLabel();
        lblPort = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jLabel1.setText("Download File");

        jLabel2.setText("File Name");

        lblFileName.setText("jLabel3");

        jLabel4.setText("File Location IP");

        jLabel5.setText("File Location Port");

        lblIp.setText("jLabel7");

        lblPort.setText("jLabel8");

        jButton1.setText("Download");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(218, 218, 218)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFileName, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                            .addComponent(lblIp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(54, 54, 54))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lblFileName))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblIp))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lblPort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(23, 23, 23))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            
        try {
            //Make this changable
            this.listenSocket = new ServerSocket(0);
            this.listenSocket.setSoTimeout(3000);
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            DatagramSocket socket = new DatagramSocket();
            
            
            // Message Format: length GET fileName listeing_TCP_Port
            String cmd = "GET";
            String fileName = lblFileName.getText().replaceAll(" ", "@@@@@");
            
            cmd = cmd + " " + fileName + " " + listenSocket.getLocalPort();
            
            cmd = String.format("%04d", cmd.length() + 5) + " " + cmd;
            byte[] msg = cmd.getBytes();
            
            InetAddress nodeIP = InetAddress.getByName(this.lblIp.getText());
            DatagramPacket DpSend = new DatagramPacket(msg, msg.length, nodeIP, Integer.parseInt(lblPort.getText()));
            socket.send(DpSend);
            System.out.println("Outgoing --> " + cmd);
            socket.close();
            
            Socket downloadSocket = listenSocket.accept();
            System.out.println("Incoming --> FileData");
            
            InputStream fileStream = downloadSocket.getInputStream();
            DigestInputStream dis = new DigestInputStream(fileStream, md);
            
            DataInputStream input = new DataInputStream(dis);
            DataOutputStream output = new DataOutputStream(new FileOutputStream(lblFileName.getText()));
            
            byte[] file = input.readAllBytes();
            output.write(file);
            
            byte[] digest =md.digest();
            String hash = "";
            for(int i=0; i < digest.length;i++){
                hash = hash + Byte.toString(digest[i]);
            }
            fileStream.close();
            dis.close();
            
            output.flush();
            output.close();
            input.close();
           
            downloadSocket.close();
            
            double size = file.length;
            
            System.out.println("Success --> Successfully downloaded the file");               
            JOptionPane.showMessageDialog(this,"Successfully Downloaded : "+ fileName+"Size(bytes): "+ size+"\nFile Hash: "+ hash,"Successfully Downloaded!",JOptionPane.INFORMATION_MESSAGE);
            
            
            
        } catch (SocketTimeoutException ex) {
            System.out.println("Error --> Timeout error");
            JOptionPane.showMessageDialog(this,"Connection Time out. Try Again!","Error!",JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Downloader.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            System.out.println("Error --> Socket bind error");
            JOptionPane.showMessageDialog(this,"Socket bind error","Error!",JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Downloader.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Downloader.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lblFileName;
    private javax.swing.JLabel lblIp;
    private javax.swing.JLabel lblPort;
    // End of variables declaration//GEN-END:variables

    
}
